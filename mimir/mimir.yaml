apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: mimir
  namespace: argocd
spec:
  project: monitoring
  source:
    repoURL: https://grafana.github.io/helm-charts
    targetRevision: 2.0.14
    chart: mimir-distributed
    helm:
      values: |
        nameOverride: mimir
        fullnameOverride: mimir

        global:
          dnsService: "kube-dns"
          dnsNamespace: "kube-system"

        serviceMonitor:
          enabled: true
        
        alertManager:
          enabled: false
        
        minio:
          enabled: false

        memcached:
          enabled: false

        memcached-queries:
          enabled: false

        memcached-metadata:
          enabled: false
        
        memcached-results:
          enabled: false

        nginx:
          enabled: true
          ingress:
            enabled: true
            ingressClassName: nginx
            annotations:
              cert-manager.io/cluster-issuer: letsencrypt
            hosts:
              - host: mimir.management.waaghals.dev
                paths:
                  - path: /
                    pathType: Prefix
            tls:
              - secretName: mimir-tls
                hosts:
                  - mimir.management.waaghals.dev
          basicAuth:
            enabled: true
            existingSecret: mimir-credentials
        querier:
          env:
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /etc/gcloud/gcloud-credentials.json
          extraVolumeMounts:
            - mountPath: /etc/gcloud
              name: gcloud-credentials
              readOnly: true
          extraVolumes:
            - name: gcloud-credentials
              secret:
                secretName: gcloud-credentials
        
        ruler:
          env:
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /etc/gcloud/gcloud-credentials.json
          extraVolumeMounts:
            - mountPath: /etc/gcloud
              name: gcloud-credentials
              readOnly: true
          extraVolumes:
            - name: gcloud-credentials
              secret:
                secretName: gcloud-credentials
        
        compactor:
          env:
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /etc/gcloud/gcloud-credentials.json
          extraVolumeMounts:
            - mountPath: /etc/gcloud
              name: gcloud-credentials
              readOnly: true
          extraVolumes:
            - name: gcloud-credentials
              secret:
                secretName: gcloud-credentials
        
        ingester:
          env:
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /etc/gcloud/gcloud-credentials.json
          extraVolumeMounts:
            - mountPath: /etc/gcloud
              name: gcloud-credentials
              readOnly: true
          extraVolumes:
            - name: gcloud-credentials
              secret:
                secretName: gcloud-credentials

        store_gateway:
          env:
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /etc/gcloud/gcloud-credentials.json
          extraVolumeMounts:
            - mountPath: /etc/gcloud
              name: gcloud-credentials
              readOnly: true
          extraVolumes:
            - name: gcloud-credentials
              secret:
                secretName: gcloud-credentials

        mimir:
          config: |
            {{- if not .Values.enterprise.enabled -}}
            multitenancy_enabled: false
            {{- end }}
            limits: {}
            activity_tracker:
              filepath: /data/metrics-activity.log
            alertmanager:
              data_dir: '/data'
              enable_api: true
              external_url: '/alertmanager'
            {{- if .Values.minio.enabled }}
            alertmanager_storage:
              backend: s3
              s3:
                endpoint: {{ .Release.Name }}-minio.{{ .Release.Namespace }}.svc:9000
                bucket_name: {{ include "mimir.minioBucketPrefix" . }}-ruler
                access_key_id: {{ .Values.minio.accessKey }}
                secret_access_key: {{ .Values.minio.secretKey }}
                insecure: true
            {{- end }}
            frontend_worker:
              frontend_address: {{ template "mimir.fullname" . }}-query-frontend-headless.{{ .Release.Namespace }}.svc:{{ include "mimir.serverGrpcListenPort" . }}
            ruler:
              enable_api: true
              rule_path: '/data'
              alertmanager_url: dnssrvnoa+http://_http-metrics._tcp.{{ template "mimir.fullname" . }}-alertmanager-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}/alertmanager
            server:
              grpc_server_max_recv_msg_size: 104857600
              grpc_server_max_send_msg_size: 104857600
              grpc_server_max_concurrent_streams: 1000
            frontend:
              log_queries_longer_than: 10s
              align_queries_with_step: true
              {{- if index .Values "memcached-results" "enabled" }}
              results_cache:
                backend: memcached
                memcached:
                  addresses: dns+{{ .Release.Name }}-memcached-results.{{ .Release.Namespace }}.svc:11211
                  max_item_size: {{ (index .Values "memcached-results").maxItemMemory }}
              cache_results: true
              {{- end }}
            compactor:
              data_dir: "/data"
            ingester:
              ring:
                final_sleep: 0s
                num_tokens: 512
                unregister_on_shutdown: false
            ingester_client:
              grpc_client_config:
                max_recv_msg_size: 104857600
                max_send_msg_size: 104857600
            runtime_config:
              file: /var/{{ include "mimir.name" . }}/runtime.yaml
            memberlist:
              abort_if_cluster_join_fails: false
              compression_enabled: false
              join_members:
                - {{ include "mimir.fullname" . }}-gossip-ring
            # This configures how the store-gateway synchronizes blocks stored in the bucket. It uses Minio by default for getting started (configured via flags) but this should be changed for production deployments.
            {{- if .Values.enterprise.enabled }}
            multitenancy_enabled: true
            admin_api:
              leader_election:
                enabled: true
                ring:
                  kvstore:
                    store: "memberlist"
            {{- if .Values.minio.enabled }}
            admin_client:
              storage:
                type: s3
                s3:
                  endpoint: {{ .Release.Name }}-minio.{{ .Release.Namespace }}.svc:9000
                  bucket_name: enterprise-metrics-admin
                  access_key_id: {{ .Values.minio.accessKey }}
                  secret_access_key: {{ .Values.minio.secretKey }}
                  insecure: true
            {{- end }}
            auth:
              type: enterprise
            cluster_name: "{{ .Release.Name }}"
            license:
              path: "/license/license.jwt"
            {{- if .Values.gateway.useDefaultProxyURLs }}
            gateway:
              proxy:
                default:
                  url: http://{{ template "mimir.fullname" . }}-admin-api.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
                admin_api:
                  url: http://{{ template "mimir.fullname" . }}-admin-api.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
                alertmanager:
                  url: http://{{ template "mimir.fullname" . }}-alertmanager.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
                compactor:
                  url: http://{{ template "mimir.fullname" . }}-compactor.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
                distributor:
                  url: dns:///{{ template "mimir.fullname" . }}-distributor-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ include "mimir.serverGrpcListenPort" . }}
                ingester:
                  url: http://{{ template "mimir.fullname" . }}-ingester.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
                query_frontend:
                  url: http://{{ template "mimir.fullname" . }}-query-frontend.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
                ruler:
                  url: http://{{ template "mimir.fullname" . }}-ruler.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
                store_gateway:
                  url: http://{{ template "mimir.fullname" . }}-store-gateway.{{ .Release.Namespace }}.svc:{{ include "mimir.serverHttpListenPort" . }}
            {{- end }}
            instrumentation:
              enabled: true
              distributor_client:
                address: 'dns:///{{ template "mimir.fullname" . }}-distributor-headless.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:{{ include "mimir.serverGrpcListenPort" . }}'
            {{- end }}

            blocks_storage:
              backend: gcs
              gcs:
                bucket_name: blocks.mimir.gcs.waaghals.dev
              tsdb:
                dir: /data/tsdb
              bucket_store:
                sync_dir: /data/tsdb-sync
            ruler_storage:
              backend: gcs
              gcs:
                bucket_name: ruler.mimir.gcs.waaghals.dev
  destination:
    server: https://kubernetes.default.svc
    namespace: mimir
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
