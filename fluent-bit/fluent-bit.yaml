apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: fluent-bit
  namespace: argocd
spec:
  generators:
    - clusters: {} # All clusters
  template:
    metadata:
      name: fluent-bit-{{name}}
    spec:
      project: monitoring
      source:
        chart: fluent-bit
        repoURL: https://fluent.github.io/helm-charts
        # keep this value in sync with the chart value in prometheus-operator-crd
        targetRevision: 0.20.1
        helm:
          values: |
            # kind -- DaemonSet or Deployment
            kind: DaemonSet

            hostNetwork: false
            dnsPolicy: ClusterFirst

            securityContext:
              capabilities:
                drop:
                 - ALL
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 1000

            # Add extra envvars to configure loki loki-credentials
            # These are parsed in the configuration file
            env:
              - name: LOKI_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: loki-credentials
                    key: username
                    optional: false
              - name: LOKI_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: loki-credentials
                    key: password
                    optional: false

            service:
              type: ClusterIP
              port: 2020
              labels: {}
              # nodePort: 30020
              # clusterIP: 172.16.10.1
              annotations: {}
            #   prometheus.io/path: "/api/v1/metrics/prometheus"
            #   prometheus.io/port: "2020"
            #   prometheus.io/scrape: "true"

            serviceMonitor:
              enabled: true
            #   namespace: monitoring
            #   interval: 10s
            #   scrapeTimeout: 10s
            #   jobLabel: fluentbit
            #   selector:
            #    prometheus: my-prometheus
            #  ## metric relabel configs to apply to samples before ingestion.
            #  ##
            #  metricRelabelings:
            #    - sourceLabels: [__meta_kubernetes_service_label_cluster]
            #      targetLabel: cluster
            #      regex: (.*)
            #      replacement: ${1}
            #      action: replace
            #  ## relabel configs to apply to samples after ingestion.
            #  ##
            #  relabelings:
            #    - sourceLabels: [__meta_kubernetes_pod_node_name]
            #      separator: ;
            #      regex: ^(.*)$
            #      targetLabel: nodename
            #      replacement: $1
            #      action: replace

            prometheusRule:
              enabled: true
              rules:
               - alert: NoOutputBytesProcessed
                 expr: rate(fluentbit_output_proc_bytes_total[5m]) == 0
                 annotations:
                   message: |
                     Fluent Bit instance {{ $labels.instance }}'s output plugin {{ $labels.name }} has not processed any
                     bytes for at least 15 minutes.
                   summary: No Output Bytes Processed
                 for: 15m
                 labels:
                   severity: critical

            dashboards:
              enabled: true
              labelKey: dashboard.grafana.com

            ## https://docs.fluentbit.io/manual/administration/configuring-fluent-bit/configuration-file
            config:
              service: |
                [SERVICE]
                    Daemon Off
                    Flush {{ .Values.flush }}
                    Log_Level {{ .Values.logLevel }}
                    Parsers_File parsers.conf
                    Parsers_File custom_parsers.conf
                    HTTP_Server On
                    HTTP_Listen 0.0.0.0
                    HTTP_Port {{ .Values.metricsPort }}
                    Health_Check On
              ## https://docs.fluentbit.io/manual/pipeline/inputs
              inputs: |
                [INPUT]
                    Name tail
                    Path /var/log/containers/*.log
                    multiline.parser docker, cri
                    Tag kube.*
                    Mem_Buf_Limit 5MB
                    Skip_Long_Lines Off
                [INPUT]
                    Name systemd
                    Tag host.*
                    Systemd_Filter _SYSTEMD_UNIT=kubelet.service
                    Read_From_Tail On
              ## https://docs.fluentbit.io/manual/pipeline/filters
              filters: |
                [FILTER]
                    Name kubernetes
                    Match kube.*
                    Merge_Log On
                    Keep_Log Off
                    K8S-Logging.Parser On
                    K8S-Logging.Exclude On
              ## https://docs.fluentbit.io/manual/pipeline/outputs
              outputs: |
                [Output]
                    Name loki
                    Match *
                    Host loki.management.waaghals.dev
                    Port 443
                    Tls on
                    Tls.Verify on
                    Http_User ${LOKI_USERNAME}
                    Http_Passwd ${LOKI_PASSWORD}
                    Labels cluster={{name}},namespace=$kubernetes['namespace_name'],pod=$kubernetes['pod_name'],container=$kubernetes['container_name'],node=$kubernetes['host']
              ## https://docs.fluentbit.io/manual/pipeline/parsers
              customParsers: |
                [PARSER]
                    Name docker_no_time
                    Format json
                    Time_Keep Off
                    Time_Key time
                    Time_Format %Y-%m-%dT%H:%M:%S.%L
                # CRI Parser
                [PARSER]
                    # http://rubular.com/r/tjUt3Awgg4
                    Name cri
                    Format regex
                    Regex ^(?<time>[^ ]+) (?<stream>stdout|stderr) (?<logtag>[^ ]*) (?<message>.*)$
                    Time_Key    time
                    Time_Format %Y-%m-%dT%H:%M:%S.%L%z
              # This allows adding more files with arbitary filenames to /fluent-bit/etc by providing key/value pairs.
              # The key becomes the filename, the value becomes the file content.
              extraFiles: {}
            #     example.conf: |
            #       [OUTPUT]
            #           Name example
            #           Match foo.*
            #           Host bar

            # The config volume is mounted by default, either to the existingConfigMap value, or the default of "fluent-bit.fullname"
            volumeMounts:
              - name: config
                mountPath: /fluent-bit/etc/fluent-bit.conf
                subPath: fluent-bit.conf
              - name: config
                mountPath: /fluent-bit/etc/custom_parsers.conf
                subPath: custom_parsers.conf

            daemonSetVolumes:
              - name: varlog
                hostPath:
                  path: /var/log
              - name: varlibdockercontainers
                hostPath:
                  path: /var/lib/docker/containers
              - name: etcmachineid
                hostPath:
                  path: /etc/machine-id
                  type: File

            daemonSetVolumeMounts:
              - name: varlog
                mountPath: /var/log
              - name: varlibdockercontainers
                mountPath: /var/lib/docker/containers
                readOnly: true
              - name: etcmachineid
                mountPath: /etc/machine-id
                readOnly: true
            logLevel: info
      destination:
        server: '{{server}}'
        namespace: fluent-bit
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
        syncOptions:
          - CreateNamespace=true
